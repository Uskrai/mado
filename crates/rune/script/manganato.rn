mod module;
use mado::http::{Url, Client};

pub fn load_module() {
    [
        MadoModule::to_module(
            "36546c8c-3f9a-40c6-ab6f-d74adf9c72f8",
            "manganato", 
            "https://manganato.com"
        ),
        MadoModule::to_module(
            "41b52ac9-bdc7-4a26-84ea-801ccbf111a2", 
            "readmanganato", 
            "https://readmanganato.com"
        ),
    ]
}

pub struct MadoModule {
    domain,

    client,
    name_regex,

    from_rust
}

impl MadoModule {
    pub fn new(id, name, domain) {
        let name_regex = mado::regex::Regex::compile("(?x)
          # Get volume (optional)
          (Vol.(?P<vol>\\d+)\\s+?)?
          # Get Chapter
          (Chapter\\s+?(?P<ch>\\d+))

          # Get Title (optional)
          ((\\s+)?:(\\s+)?
          (?P<title>.*))?
        ");

        Self { 
            domain,
            name_regex, 
            client: mado::http::Client::default_(), 
            from_rust: Self::from_rust 
        }
    }

    pub fn to_module(uuid,name,domain) {
        let this = Self::new(uuid, name, domain);
        let client = this.client.clone();
        module::new(
            #{
                uuid, name, domain
            },
            this,
            #{
                get_info: Self::get_info,
                get_chapter_images: Self::get_chapter_images,
                download_image: Self::download_image,
            }
        )
    }

    pub fn from_rust(data) {
        Self {
            domain: data.domain,
            client: data.client,
            name_regex: data.name_regex,
            from_rust: Self::from_rust
        }
    }

    pub async fn get_info(self, url) {
        let response = self.client.get(url.clone()).send().await.unwrap().text().await;

        let doc = mado::html::Document::new(response);

        let info = self.parse_info(url, doc)?;

        info.chapters = [];
        let chapters = doc.find("ul.row-content-chapter>li");
        for it in chapters.iter() {
            info.chapters.push(self.parse_chapter(it));
        }
        info.chapters.reverse();

        Ok(info)
    }

    pub fn parse_info(self, url, doc) {
        if doc.find("div.panel-not-found").len() != 0 {
            return Err(mado::error::Error::request_error(url, "404 not found"));
        }

        let info = #{};
        info.id = url.to_string();

        let find = |key, attr| {
            doc.find(key).attr(attr).map(|v| v.to_string())
        };


        let property = |key| {
            find(`meta[property='og:${key}']`, "content")
        };

        info.title = doc.find("h1").text().to_string();

        info.cover_link = property("image");
        let summary = doc.find("div.panel-story-info-description");
        // remove <h3>Description :</h3>
        summary.children().first().remove();
        info.summary = summary.text().to_string().trim();

        let find_info = |key| {
            doc.find(key)
                .parent()
                .parent()
                .find("td.table-value")
                .find("a")
                .iter()
                .map(|v| v.text().to_string())
                .collect_vec()
        };
        info.genres = find_info("i.info-genres");
        info.authors = find_info("i.info-author");
        info.artists = [];
        info.types = "Series";

        Ok(info)
    }

    pub fn parse_chapter(self, doc) {
        let info = #{};

        info.title = doc.find("a").text().to_string();
        info.id = doc.find("a").attr("href").unwrap().to_string();
        info.volume = None;
        info.chapter = None;
        info.language = "en";

        let cap = self.name_regex.captures(info.title.clone());
        if let Some(cap) = cap {
            info.chapter = cap.name("ch");
            info.volume = cap.name("vol");
            info.title = cap.name("title").unwrap_or(info.title);
        }

        info
    }

    async fn get_chapter_images(self, task) {
        use mado::http::Url;

        let response = self.client
            .get(Url::parse(task.get_chapter_id()).unwrap())
            .send()
            .await?;

        let html = mado::html::Document::new(response.text().await);

        let queries = [
            #{ find: "div#vungdoc>img" },
            #{ find: "div#vungdoc>img", src: "data-src" },
            #{ find: "div.container-chapter-reader>img" },
            #{ find: "div.vung_doc>img" },
        ];

        let images = [];

        for query in queries {
            images = html.find(query.find)
                .iter()
                .map(|img| self.parse_image(query, img))
                .filter(|v| v.is_some())
                .map(|v| v.unwrap())
                .collect_vec();

            if images.len() != 0 {
                break;
            }
        }


        for it in images.iter() {
            task.add(#{
                id: it.src,
                name: it.title,
                extension: Url::parse(it.src).unwrap().extension().unwrap(),
            });
        }

        Ok(())
    }

    fn parse_image(self, query, img) {
        let get = |name| {
            let attr = query.get(name).unwrap_or(name);
            img.attr(attr).map(|v| v.to_string())
        };

        let result = #{
            title: get("title"),
            src: get("src")?
        };

        Some(result)
    }

    async fn download_image(self, image) {
        let url = Url::parse(image.id).unwrap();
        let response = self.client
            .get(url.clone())
            .header("Referer", self.domain)
            .send()
            .await?;

        let status = response.status();
        if status.is_client_error() || status.is_server_error() {
            return Err(mado::error::Error::request_error(
                url, 
                response.text().await
            ));
        }

        Ok(response.bytes_stream())
    }

}

mod test {
    use mado::http::Url;
    use super::*;
    mod mock;

    pub fn create_module() {
        super::load_module()[0].module
    }

    #[test]
    pub async fn get_info() {
        let module = create_module();
        let url = Url::parse("https://readmanganato.com/manga-yu976355").unwrap();
        let info = module.get_info(url).await;

        info
    }

    #[test]
    pub async fn get_info_404() {
        let module = create_module();
        let url = Url::parse("https://readmanganato.com/manga-yu176355").unwrap();
        let info = module.get_info(url).await;

        match info {
            Ok(info) => {
                panic(`expected error found: ${info}`);
            }
            Err(err) => {
                assert_eq!(err.to_string_variant(), "RequestError");
            }
            _ => {
                panic("Expected Result");
            }
        }
    }

    #[test]
    pub async fn get_chapter_images() {
        let module = create_module();
        let url = Url::parse("https://readmanganato.com/manga-yu976355").unwrap();
        let info = module.get_info(url)
            .await
            .expect("expecting Ok");
        let chapter = info.chapters.get(0).expect("expecting manga with chapter");

        let task = mado::MockChapterTask::new(chapter);
        let result = module.get_chapter_images(task).await;
        Ok(task)
    }

    #[test]
    pub async fn download_image() {
        let module = create_module();
        let task = get_chapter_images().await.unwrap();
        let id = task.get_image_info_at(0);

        module.download_image(id).await.unwrap()
    }
}
