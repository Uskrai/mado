
use mado::http::Url;

mod module;

const API_URL = "https://api.mangadex.org"; // This is the url to the JSON API. Call this url to look at the API documentation.
const API_PARAMS = "includes[]=author&includes[]=artist&includes[]=cover_art";
const COVER_URL = "https://uploads.mangadex.org/covers";
const HEX = "[0-9a-fA-F]";

// entry point
// this function should return a MadoModule or array of MadoModule
pub fn load_module() {
    MadoModule::to_module(
        "07bd7f6b-12a1-48f1-9873-f175d4f76c9a", 
        "MangaDex",
        "https://mangadex.org"
    )
}

pub fn create_pointer_function(url, json) {
    |key| {
        json.pointer(key).ok_or_else(|| {
            mado::error::Error::
                unexpected_response(url,
                    `${key} key doesn't exists, found: ${json.to_string_pretty()}`)
        })
    }
}

struct MadoModule {
    // Name of the website, e.g MangaDex.
    // used to display website name
    // name,
    // // Domain of the website, e.g https://mangadex.org, https://mangakakalot.com
    // // the domain should always contain 'https://' or 'http://, not doing so will result in error.
    // // this is used to search which module is used when given url
    // domain,

    // local data you can get from calling data() in MadoModule passed from rust
    // data that rust doesnt use should be placed here because the struct will be converted Any(MadoModule)
    // and doesnt retain unused data.
    id_regex,
    client,

    from_rust,
}

impl MadoModule {
    pub fn new() {
        return MadoModule {
            id_regex:
                mado::regex::Regex
                ::compile(`${HEX}{8}-${HEX}{4}-${HEX}{4}-${HEX}{4}-${HEX}{12}`),
                client: mado::http::Client::default_(),
                from_rust: Self::from_rust
        };
    }

    pub fn to_module(uuid, name, domain) {
        let data = Self::new();
        let metadata = #{
            uuid,
            name,
            domain,
        };

        let method = #{
            get_info: Self::get_info,
            get_chapter_images: Self::get_chapter_images,
            download_image: Self::download_image,
        };

        module::new(metadata, data, method)

    }

    pub fn from_rust(data) {
        Self {
            id_regex: data.id_regex,
            client: data.client,
            from_rust: data.from_rust
        }
    }

    /// parse json response from mangadex api
    /// will return Err if jsoin.pointer("/result") is "error"
    pub fn parse_response(self, url, json) {
        let pointer = create_pointer_function(url, json);
        let result = pointer("/result")?;

        if result == "error" {
            let errors = "";
            for it in pointer("/errors")? {
                if let Some(it) = it.get("detail") {
                    errors = format!("{}{}\n", errors, it);
                }
            }
            return Err(mado::error::Error::request_error(url, errors));
        }

        Ok(json)
    }

    /// retrieve manga info of given url frrom website
    /// url is crate::runes::http::Url
    /// return Result<MangaInfo, crate::Error>
    pub async fn get_info(self, url) {
        let id = self.id_regex.find(url.to_string()).get_match().ok_or_else(||{
            mado::error::Error::invalid_url(url)
        })?;

        let manga_info_req = self.get_manga_info(id);
        let manga_ch_req = self.get_chapter_info(id);

        let manga_info = #{};
        let manga_chapters = [];
        loop {
            let res = select {
                res = manga_info_req => {
                    manga_info = res?;
                    manga_info
                }
                res = manga_ch_req => {
                    manga_chapters = res?;
                    manga_chapters
                }
            };

            match res {
                () => { break; }
            }
        }

        manga_info.chapters = manga_chapters;
        Ok(manga_info)
    }

    async fn get_manga_info(self, id) {
        let url = `${API_URL}/manga/${id}?${API_PARAMS}`;
        let url = mado::http::Url::parse(url)?;
        let response = self.client.get(url.clone()).send().await?;
        let json = response.json().await?;

        let json = self.parse_response(url, json)?;
        let pointer = create_pointer_function(url.clone(), json);

        let info = #{};
        info.id = id;
        info.title = pointer("/data/attributes/title/en")
            .or_else(|| {
                pointer("/data/attributes/title/ja")
            })
        .unwrap_or("Missing Title");

        info.summary = pointer("/data/attributes/description/en").ok();
        info.authors = json
            .select_as_value("$.data.relationships[?(@.type=='author')].attributes.name")
            .unwrap();

        info.artists = json
            .select_as_value("$.data.relationships[?(@.type=='artist')].attributes.name")
            .unwrap();

        info.genres = json.
            select_as_value("$.data.attributes.tags..attributes.name.en")
            .unwrap();

        let demographic = pointer("/data/attributes/publicationDemographic")?;

        match demographic {
            None => {}
            _ => { info.genres.push(demographic) }
        }

        info.genres.extend(
            json
            .select_as_value("$.data.attributes.contentRating")
            .unwrap()
        );

        info.types = "Series";

        let cover_link =
            json.select_as_value("$.data.relationships[?(@.type=='cover_art')].attributes.fileName")
            .unwrap();

        if cover_link.len() != 0 {
            info.cover_link = Some(`${COVER_URL}/${id}/${cover_link[0]}`);
        } else {
            info.cover_link = None;
        }

        Ok(info)
    }

    async fn get_chapter_info(self, id) {
        let chapters = [];
        let total = 1;
        let offset = 0;
        let request_limit = 2;

        while total > offset {

            let url = `${API_URL}/manga/${id}/feed?${API_PARAMS}&offset=${offset}&limit=500`
                +"&contentRating[]=safe&contentRating[]=suggestive"
                + "&contentRating[]=erotica&contentRating[]=pornographic"
                + "&includes[]=scanlation_group&order[volume]=asc&order[chapter]=asc"
                + "&translatedLanguage[]=en";


            let url = mado::http::Url::parse(url)?;
            let response = self.client.get(url.clone()).send().await?;

            let json = response.json().await?;
            let pointer = create_pointer_function(url.clone(), json);

            total = pointer("/total")?;
            offset += pointer("/limit")?;

            if pointer("/result").unwrap() == "error" {
                let detail = pointer("/errors/0/detail");
                return Err(mado::error::Error::request_error(url, detail));
            }

            let chapter_json = json.select_as_json("$.data.*").unwrap();

            for it in chapter_json {
                let ch = self.parse_chapter_info(it);
                if let Some(ch) = ch {
                    chapters.push(ch?);
                }
            }
        }

        Ok(chapters)
    }

    fn parse_chapter_info(self, json) {
        let info = #{};
        let attr = json.pointer("/attributes").expect("/attributes doesn't exists");

        let if_empty = |string| {
            match string {
                None => {
                    ""
                },
                _ => string
            }
        };

        info.volume = attr.volume;
        info.chapter = attr.chapter;
        info.title = Some(attr.title).flatten().filter(|v| !v.is_empty());

        info.language = if_empty(attr.translatedLanguage);

        info.scanlator = json
            .select_as_value("$.relationships[?(@.type=='scanlation_group')]..name")
            .unwrap().get(0);

        info.id = if_empty(json.pointer("/id").expect("chapter id doesn't exist"));

        Some(Ok(info))
    }

    async fn get_chapter_images(self, id, task) {
        use mado::http::Url;

        let url = Url::parse(`${API_URL}/chapter/${id}`).unwrap();

        let id_request = self.get_chapter_images_id(id);
        let server_request = self.get_chapter_image_server(id);

        let json = [];
        let server = "";
        loop {
            let val = select {
                res = id_request => {
                    json = res?;
                    Ok(())
                }
                res = server_request => {
                    server = res?;
                    Ok(())
                }
            };

            match val {
                () => break,
            }
        }


        let pointer = create_pointer_function(url, json);
        let hash = pointer("/data/attributes/hash")?;

        for it in pointer("/data/attributes/data")? {
            let images = `${server}/data/${hash}/${it}`;
            task.add(#{
                id: images,
                extension: Url::parse(images).unwrap().extension().unwrap(),
            });
        }
        Ok(())
    }

    async fn get_chapter_images_id(self, id) {
        use mado::http::Url;
        let url = Url::parse(`${API_URL}/chapter/${id}`).unwrap();
        let json = self.client.get(url.clone()).send().await?.json().await?;

        let json = self.parse_response(url, json)?;

        Ok(json)
    }

    async fn get_chapter_image_server(self, id) {
        use mado::http::Url;
        let url = Url::parse(`${API_URL}/at-home/server/${id}`).unwrap();

        let json = self.client.get(url.clone()).send().await?.json().await?;

        let json = self.parse_response(url, json)?;
        let pointer = create_pointer_function(url, json);

        let server = pointer("/baseUrl")?;

        Ok(server)
    }

    async fn download_image(self, image) {
        let url = Url::parse(image.id).unwrap();
        let response = self.client.get(url).send().await?;
        Ok(response.bytes_stream())
    }
}

mod test {
    use super::*;

    fn create_module() {
        super::load_module().module
    }

    fn create_client() {
        mado::http::Client::default_()
    }

    #[test]
    pub async fn invalid_url() {
        let module = create_module();
        let url = mado::http::Url
            ::parse("https://mangadex.org/title/5ebe4265-da26-4a3f--a2e4-5634af489ce5")
            .unwrap();

        let info = module.get_info(url).await;
        match info {
            Ok(v) => {
                panic(`${url.to_string()} should be invalid url`);
            },
            Err(info) => {
                assert_eq!(info.to_string_variant(), "InvalidUrl");
            }
        }
    }

    #[test]
    pub async fn get_info() {
        use mado::http;
        let module = create_module();
        let url = http::Url
            ::parse("https://mangadex.org/title/5ebe4265-da26-4a3f-a2e4-5634af489ce5")
            .unwrap();

        let info = module.get_info(url).await;


        info
    }

    #[test]
    pub async fn err_get_info() {
        use mado::http;
        let module = create_module();

        // this might be changed if this isn't an error
        let url = http::Url
            ::parse("https://mangadex.org/title/5ebe4265-da26-4a3f-a2e4-56c4af489ce5")
            .unwrap();

        let info = module.get_info(url).await;

        match info {
            Ok(val) => {
                panic(`should error found: ${val.to_string_debug()}`);
            }
            Err(info) => {
                assert_eq!(info.to_string_variant(), "RequestError");
            }
        }
    }

    #[test]
    pub async fn get_chapter_images() {
        use mado::http::Url;
        let module = create_module();
        let url = Url
            ::parse("https://mangadex.org/title/5ebe4265-da26-4a3f-a2e4-5634af489ce5")
            .unwrap();

        let info = module.get_info(url).await.unwrap();
        let chapter = info.chapters.get(0).unwrap();

        let id = chapter.id.clone();
        let task = mado::MockChapterTask::new(chapter);
        let result = module.get_chapter_images(id, task).await?;
        Ok(task)
    }

    #[test]
    pub async fn download_image() {
        use mado::http::Url;
        let module = create_module();
        let chapter = get_chapter_images().await.unwrap();
        let image = chapter.get_image_info_at(0);

        module.download_image(image).await.unwrap()
    }
}
